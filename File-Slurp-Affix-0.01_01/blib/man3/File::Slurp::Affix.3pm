.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.40)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "File::Slurp::Affix 3"
.TH File::Slurp::Affix 3 "2020-10-15" "perl v5.28.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
File::Slurp::Affix opens a file and creates an array with an optional prefix, suffix, or both with an optional separator in your preferred encoding.
.SH "VERSION"
.IX Header "VERSION"
This document describes File::Slurp::Affix version 0.01_01.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use File::Slurp::Affix qw(slurp_affix);
\&
\&  my @plain_array      = slurp_affix($file);
\&
\&  my @prefix_array     = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqfoo\*(Aq });
\&
\&  my @suffix_array     = slurp_affix($file, { \*(Aqsuffix\*(Aq => \*(Aqbar\*(Aq });
\&
\&  my @both_array       = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqfoo\*(Aq, \*(Aqsuffix\*(Aq => \*(Aqbar\*(Aq });
\&
\&  my @separator_array  = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqfoo\*(Aq, \*(Aqsuffix\*(Aq => \*(Aqbar\*(Aq, \*(Aqseparator\*(Aq => \*(Aq \*(Aq });
\&
\&  my @empty_line       = slurp_affix($file, { \*(Aqempty\*(Aq => \*(Aqfill\*(Aq });
\&
\&  my @encoded_array    = slurp_affix($file, { \*(Aqencoding\*(Aq => \*(Aqascii\*(Aq });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`slurp_affix\*(C'\fR can be exported and returns a list of values. These values can be modified if the optional parameters \f(CW\*(C`prefix\*(C'\fR, \f(CW\*(C`suffix\*(C'\fR, or both are used. There is the additional option to choose your \f(CW\*(C`encoding\*(C'\fR, the default is \f(CW\*(C`utf\-8\*(C'\fR.
.PP
If the open fails, \f(CW\*(C`slurp_affix\*(C'\fR will die.
.PP
.Vb 10
\&  my @fancy_array = slurp_affix(
\&    $file,
\&    {
\&      \*(Aqprefix\*(Aq => $prefix_string,
\&      \*(Aqsuffix\*(Aq => $suffix_string,
\&      \*(Aqseparator\*(Aq => $separator_string,
\&      \*(Aqempty\*(Aq  => $empty_option,
\&      \*(Aqencoding\*(Aq => $encoding_option
\&    }
\&  );
.Ve
.PP
The file is also closed by \f(CW\*(C`slurp_affix\*(C'\fR.
.PP
\&\f(CW\*(C`File::Slurp::Affix\*(C'\fR requires Perl version 5.6 or better.
.SS "Parameters"
.IX Subsection "Parameters"
\&\f(CW\*(C`slurp_affix\*(C'\fR has two parameters.
.PP
\&\fBNote:\fR all sample returned arrays are the results from Data::Dump.
.PP
Sample file contents.
.PP
.Vb 10
\&  red
\&  orange
\&  yellow
\&  spring
\&  green
\&  teal
\&  cyan
\&  azure
\&  blue
\&  violet
\&  magenta
\&  pink
\&  white
\&  black
\&  gray
.Ve
.PP
\fIfile\fR
.IX Subsection "file"
.PP
.Vb 1
\&  my @plain_array = slurp_affix($file);
.Ve
.PP
The first parameter is the file to be opened. If this is the only parameter specified, the file will be opened, encoded to \f(CW\*(C`utf\-8\*(C'\fR, and returned as a list.
.PP
\fIOptions\fR
.IX Subsection "Options"
.PP
The second parameter are the options: \f(CW\*(C`prefix\*(C'\fR, \f(CW\*(C`suffix\*(C'\fR, \f(CW\*(C`separator\*(C'\fR, \f(CW\*(C`encoding\*(C'\fR, and \f(CW\*(C`empty\*(C'\fR.
.PP
prefix
.IX Subsection "prefix"
.PP
.Vb 1
\&  my @prefix_array = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqsolid\*(Aq });
.Ve
.PP
The \f(CW\*(C`prefix\*(C'\fR option is the string you want prepended to each item in the list. Using the example, all items on the list will be returned with \f(CW\*(C`foo\*(C'\fR prepended to them.
.PP
.Vb 10
\&  (
\&    "solidred",
\&    "solidorange",
\&    "solidyellow",
\&    "solidspring",
\&    "solidgreen",
\&    "solidteal",
\&    "solidcyan",
\&    "solidazure",
\&    "solidblue",
\&    "solidviolet",
\&    "solidmagenta",
\&    "solidpink",
\&    "solidwhite",
\&    "solidblack",
\&    "solidgray",
\&  )
.Ve
.PP
suffix
.IX Subsection "suffix"
.PP
.Vb 1
\&  my @suffix_array = slurp_affix($file, { \*(Aqsuffix\*(Aq => \*(Aqbead; });
.Ve
.PP
The \f(CW\*(C`suffix\*(C'\fR option is the string you want to appear appended to each item in the list. Using the example, all items on the list will be returned with \f(CW\*(C`bar\*(C'\fR appended to them.
.PP
.Vb 10
\&  (
\&    "redbead",
\&    "orangebead",
\&    "yellowbead",
\&    "springbead",
\&    "greenbead",
\&    "tealbead",
\&    "cyanbead",
\&    "azurebead",
\&    "bluebead",
\&    "violetbead",
\&    "magentabead",
\&    "pinkbead",
\&    "whitebead",
\&    "blackbead",
\&    "graybead",
\&  )
.Ve
.PP
prefix and suffix
.IX Subsection "prefix and suffix"
.PP
.Vb 1
\&  my @both_array = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqsolid\*(Aq, \*(Aqsuffix\*(Aq => \*(Aqbead\*(Aq });
.Ve
.PP
Using both the \f(CW\*(C`prefix\*(C'\fR and \f(CW\*(C`suffix\*(C'\fR options together will prepend and append the associated strings to the items in the list.
.PP
.Vb 10
\&  (
\&    "solidredbead",
\&    "solidorangebead",
\&    "solidyellowbead",
\&    "solidspringbead",
\&    "solidgreenbead",
\&    "solidtealbead",
\&    "solidcyanbead",
\&    "solidazurebead",
\&    "solidbluebead",
\&    "solidvioletbead",
\&    "solidmagentabead",
\&    "solidpinkbead",
\&    "solidwhitebead",
\&    "solidblackbead",
\&    "solidgraybead",
\&  )
.Ve
.PP
separator
.IX Subsection "separator"
.PP
.Vb 1
\&  my @separator_array = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqsolid\*(Aq, \*(Aqsuffix\*(Aq => \*(Aqbead\*(Aq, \*(Aqseparator\*(Aq => \*(Aq \*(Aq });
.Ve
.PP
The \f(CW\*(C`separator\*(C'\fR option will add a string between the prefix, the line from the file, and the suffix. In this case, a single space.
.PP
.Vb 10
\&  (
\&    "solid red bead",
\&    "solid orange bead",
\&    "solid yellow bead",
\&    "solid spring bead",
\&    "solid green bead",
\&    "solid teal bead",
\&    "solid cyan bead",
\&    "solid azure bead",
\&    "solid blue bead",
\&    "solid violet bead",
\&    "solid magenta bead",
\&    "solid pink bead",
\&    "solid white bead",
\&    "solid black bead",
\&    "solid gray bead",
\&  )
.Ve
.PP
empty
.IX Subsection "empty"
.PP
.Vb 1
\&  my @empty_line = slurp_affix($file, { \*(Aqempty\*(Aq => \*(Aqfill\*(Aq });
.Ve
.PP
The \f(CW\*(C`empty\*(C'\fR option has three possible values for what to do with empty lines in the file: \f(CW\*(C`fill\*(C'\fR, \f(CW\*(C`blank\*(C'\fR, or \f(CW\*(C`undefined\*(C'\fR. If \f(CW\*(C`empty\*(C'\fR is not used or is any value than the three listed, the empty line will be ignored.
.PP
Sample file contents with an empty line.
.PP
.Vb 8
\&  red
\&  orange
\&  yellow
\&  spring
\&  green
\&  teal
\&  cyan
\&  azure
\&
\&  blue
\&  violet
\&  magenta
\&  pink
\&  white
\&  black
\&  gray
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`fill\*(C'\fR will prefix and suffix the value as it does with all other lines.
.Sp
.Vb 1
\&  my @empty_line = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqsolid\*(Aq, \*(Aqempty\*(Aq => \*(Aqfill\*(Aq });
.Ve
.Sp
The array returned will be:
.Sp
.Vb 10
\&  (
\&    "solidred",
\&    "solidorange",
\&    "solidyellow",
\&    "solidspring",
\&    "solidgreen",
\&    "solidteal",
\&    "solidcyan",
\&    "solidazure",
\&    "solid",
\&    "solidblue",
\&    "solidviolet",
\&    "solidmagenta",
\&    "solidpink",
\&    "solidwhite",
\&    "solidblack",
\&    "solidgray",
\&  )
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`blank\*(C'\fR will return a zero length but defined value.
.Sp
.Vb 1
\&  my @empty_line = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqsolid\*(Aq, \*(Aqempty\*(Aq => \*(Aqblank\*(Aq });
.Ve
.Sp
The array returned will be:
.Sp
.Vb 10
\&  (
\&    "solidred",
\&    "solidorange",
\&    "solidyellow",
\&    "solidspring",
\&    "solidgreen",
\&    "solidteal",
\&    "solidcyan",
\&    "solidazure",
\&    "",
\&    "solidblue",
\&    "solidviolet",
\&    "solidmagenta",
\&    "solidpink",
\&    "solidwhite",
\&    "solidblack",
\&    "solidgray",
\&  )
.Ve
.IP "\(bu" 4
\&\f(CW\*(C`undefined\*(C'\fR will return an undefined value.
.Sp
.Vb 1
\&  my @empty_line = slurp_affix($file, { \*(Aqprefix\*(Aq => \*(Aqsolid\*(Aq, \*(Aqempty\*(Aq => \*(Aqundefined\*(Aq });
.Ve
.Sp
The array returned will be:
.Sp
.Vb 10
\&  (
\&    "solidred",
\&    "solidorange",
\&    "solidyellow",
\&    "solidspring",
\&    "solidgreen",
\&    "solidteal",
\&    "solidcyan",
\&    "solidazure",
\&    undef,
\&    "solidblue",
\&    "solidviolet",
\&    "solidmagenta",
\&    "solidpink",
\&    "solidwhite",
\&    "solidblack",
\&    "solidgray",
\&  )
.Ve
.PP
encoding
.IX Subsection "encoding"
.PP
.Vb 1
\&  my @encoded_array = slurp_affix($file, { \*(Aqencoding\*(Aq => \*(Aqascii\*(Aq });
.Ve
.PP
The \f(CW\*(C`encoding\*(C'\fR option is the encoding you want to use to open the file. The above file will be opened \f(CW\*(C`ascii\*(C'\fR encoded.
.SH "DEPENDENCY"
.IX Header "DEPENDENCY"
File::Slurp::Affix depends on Exporter.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
To install this module use your preferred \s-1CPAN\s0 installer or run the following commands:
.PP
.Vb 4
\&  perl Makefile.PL
\&  make
\&  make test
\&  make install
.Ve
.SH "SUPPORT"
.IX Header "SUPPORT"
You can find documentation for this module with the perldoc command.
.PP
.Vb 1
\&    perldoc File::Slurp::Affix
.Ve
.PP
You can also look for information at:
.IP "\(bu" 4
File::Slurp::Affix on GitHub <https://github.com/LadyAleena/File-Slurp-Affix> (issues <https://github.com/LadyAleena/File-Slurp-Affix/issues>)
.IP "\(bu" 4
File::Slurp::Affix on \s-1CPAN\s0 Ratings <https://cpanratings.perl.org/d/File-Slurp-Affix>
.IP "\(bu" 4
File::Slurp::Affix on Search \s-1CPAN\s0 <https://metacpan.org/release/File-Slurp-Affix>
.SH "AUTHOR"
.IX Header "AUTHOR"
Lady Aleena
.SH "LICENSE AND COPYRIGHT"
.IX Header "LICENSE AND COPYRIGHT"
This module is free software; you can redistribute it and/or modify it under the same terms as Perl itself. See perlartistic.
.PP
Copyright © 2020, Lady Aleena \f(CW\*(C`(aleena@cpan.org)\*(C'\fR. All rights reserved.
